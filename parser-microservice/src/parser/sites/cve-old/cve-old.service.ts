import { HttpService } from '@nestjs/axios';
import {
  Injectable,
  Logger,
  OnModuleInit,
  ServiceUnavailableException,
} from '@nestjs/common';
import { firstValueFrom } from 'rxjs';
import * as cheerio from 'cheerio';
import * as moment from 'moment';

interface IPhase {
  id: number;
}

class Phase implements IPhase {
  id: number;

  constructor(phase: IPhase) {
    Object.assign(this, phase);
  }
}

interface IAspFormData {
  __VIEWSTATE: string;
  __EVENTVALIDATION: string;
}

interface ICalendarFormData {
  __EVENTTARGET: string;
  __EVENTARGUMENT: string;
  ctl00_Content_Left_RTS_VolleyType_ClientState: string;
  ctl00$Content_Left$RCB_Period: number;
  ctl00_Content_Left_RCB_Period_ClientState: string;
}

enum VolleyType {
  VolleyballClubs = 0,
  VolleyballNationalTeam = 1,
  BeachVolleyball = 2,
  SnowVolleyball = 3,
}

class AspFormData implements IAspFormData {
  __VIEWSTATE: string;
  __EVENTVALIDATION: string;
}

export class GetCalendarDto extends AspFormData {
  year!: number;
  type: VolleyType;
}

export interface ICompetition {
  id: number;
  phase: Pick<Phase, 'id'> | null;
  name: string;
  venue: string;
  startDate: Date;
  endDate: Date;
}

export class Competition implements ICompetition {
  id: number;
  name: string;
  venue: string;
  startDate: Date;
  endDate: Date;
  phase: Pick<Phase, 'id'> | null;

  constructor(competition: ICompetition) {
    Object.assign(this, competition);
  }
}

type FormPayload<T extends object> = IAspFormData & T;

@Injectable()
export class CveOldService implements OnModuleInit {
  private readonly logger = new Logger(CveOldService.name);

  constructor(private readonly httpService: HttpService) {}

  async onModuleInit() {
    this.logger.debug('Запущен');

    const formData = await this.getCalendar();
    const competitions = await this.postCalendar({
      ...formData,
      year: 2025,
      type: VolleyType.SnowVolleyball,
    });

    console.log(competitions.length);
    console.log(competitions.sort((a, b) => b.id - a.id));
  }

  async getCalendar(): Promise<IAspFormData> {
    const { data } = await firstValueFrom(
      this.httpService.get('calendar.aspx'),
    );
    const $ = cheerio.load(data);

    const __VIEWSTATE = $('input#__VIEWSTATE').attr('value');
    const __EVENTVALIDATION = $('input#__EVENTVALIDATION').attr('value');

    if (!__VIEWSTATE || !__EVENTVALIDATION) {
      throw new ServiceUnavailableException(
        'Не удалось получить данные формы для календаря',
      );
    }

    return { __VIEWSTATE, __EVENTVALIDATION };
  }

  async postCalendar(dto: GetCalendarDto): Promise<Competition[]> {
    const { year, __VIEWSTATE, __EVENTVALIDATION, type } = dto;

    const payload: FormPayload<ICalendarFormData> = {
      __VIEWSTATE,
      __EVENTVALIDATION,
      __EVENTTARGET: 'ctl00$Content_Left$RTS_VolleyType',
      __EVENTARGUMENT: JSON.stringify({ type: 0, index: type }),
      ctl00_Content_Left_RTS_VolleyType_ClientState: JSON.stringify({
        selectedIndexes: [type],
        logEntries: [],
        scrollState: {},
      }),
      ctl00$Content_Left$RCB_Period: year,
      ctl00_Content_Left_RCB_Period_ClientState: JSON.stringify({
        logEntries: [],
        value: year,
        text: year,
        enabled: true,
        checkedIndices: [],
        checkedItemsTextOverflows: false,
      }),
    };

    const { data } = await firstValueFrom(
      this.httpService.post('calendar.aspx', payload, {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      }),
    );

    const $ = cheerio.load(data);
    const competitionElements = $('div#boxBody div.RadListView table tbody tr');

    const competitions: Competition[] = competitionElements
      .map((_, el) => {
        const $el = $(el);
        const href = $el.find('td a').first().attr('href')?.trim() ?? '';
        const match = href.match(/ID=(\d+)(?:&PID=(\d+))?/);

        if (!match) return;

        const [, id, phaseId] = match;
        const dateStr = $el.find('td a').eq(0).text().trim();
        const [startStr, endStr] = dateStr.split(' - ');

        const startDate = moment(startStr, 'DD/MM/YYYY').toDate();
        const endDate = moment(endStr, 'DD/MM/YYYY').toDate();

        const name = $el.find('td a').eq(1).text().trim();
        const venue = $el.find('td a').eq(3).text().trim();

        return new Competition({
          id: parseInt(id),
          phase: phaseId ? new Phase({ id: parseInt(phaseId) }) : null,
          name,
          startDate,
          endDate,
          venue,
        });
      })
      .toArray();

    return competitions;
  }
}
