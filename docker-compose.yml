services:
  api_gateway:
    container_name: api_gateway
    build: ./http-api-gateway
    ports:
      - "3000:3000"
    volumes:
      - ./http-api-gateway/src:/usr/src/app/src
    command: yarn run start:dev
    develop:
      watch:
        - action: sync
          path: ./src
          target: /app/src
          ignore:
            - node_modules/
            - dist/
        - action: sync
          path: ./test
          target: /app/test
        - action: rebuild
          path: package.json
        - action: rebuild
          path: yarn.lock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 2s
      timeout: 5s
      retries: 15
    environment:
      - PORT=3000
    depends_on:
      nats:
        condition: service_started
      users_microservice:
        condition: service_healthy
      parser_microservice:
        condition: service_healthy

  users_microservice:
    container_name: users_microservice
    build: ./users-microservice
    volumes:
      - ./users-microservice/src:/usr/src/app/src
    command: yarn run start:dev
    develop:
      watch:
        - action: sync
          path: ./src
          target: /app/src
          ignore:
            - node_modules/
            - dist/
        - action: sync
          path: ./test
          target: /app/test
        - action: rebuild
          path: package.json
        - action: rebuild
          path: yarn.lock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 15s
      timeout: 3s
      retries: 3
    depends_on:
      nats:
        condition: service_started
    restart: unless-stopped

  parser_microservice:
    container_name: parser_microservice
    build: ./parser-microservice
    volumes:
      - ./parser-microservice/src:/usr/src/app/src
    command: yarn run start:dev
    develop:
      watch:
        - action: sync
          path: ./src
          target: /app/src
          ignore:
            - node_modules/
            - dist/
        - action: sync
          path: ./test
          target: /app/test
        - action: rebuild
          path: package.json
        - action: rebuild
          path: yarn.lock
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${PARSER_MICROSERVICE_HEALTHCHECK_PORT}/health",
        ]
      interval: 15s
      timeout: 3s
      retries: 3
    depends_on:
      nats:
        condition: service_started
      redis:
        condition: service_healthy
      cloudflare_proxy:
        condition: service_started
    env_file:
      - .env

    restart: unless-stopped

  nats:
    container_name: nats
    image: nats
    ports:
      - 4222:4222
    restart: always

  cloudflare_proxy:
    container_name: cloudflare_proxy
    build: ./cloudscraper
    # ports:
    #   - ${CLOUFLAREBYPASS_PROXY_PORT-8080}:8080
    environment:
      - UPSTREAM_PROXY=http://${SCRAPOXY_USERNAME}:${SCRAPOXY_PASSWORD}@${SCRAPOXY_HOST}:${SCRAPOXY_PORT}
    depends_on:
      scrapoxy:
        condition: service_healthy
    expose:
      - ${CLOUFLAREBYPASS_PROXY_PORT}

  scrapoxy:
    container_name: scrapoxy
    image: scrapoxy/scrapoxy
    ports:
      - "${SCRAPOXY_WEB_PORT}:8890" # Web UI
    volumes:
      - ./scrapoxy:/cfg
    environment:
      - AUTH_LOCAL_USERNAME=${SCRAPOXY_AUTH_LOCAL_USERNAME}
      - AUTH_LOCAL_PASSWORD=${SCRAPOXY_AUTH_LOCAL_PASSWORD}
      - BACKEND_JWT_SECRET=${SCRAPOXY_BACKEND_JWT_SECRET}
      - FRONTEND_JWT_SECRET=${SCRAPOXY_FRONTEND_JWT_SECRET}
      - STORAGE_FILE_FILENAME=${SCRAPOXY_STORAGE_FILE_FILENAME}
      - MASTER_PORT=${SCRAPOXY_PORT}
      - PROBE_PORT=${SCRAPOXY_PROBE_PORT}
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-q",
          "--spider",
          "http://localhost:${SCRAPOXY_PROBE_PORT}",
        ]
      interval: 2s
      timeout: 5s
      retries: 15
    expose:
      - ${SCRAPOXY_PORT}

  redis:
    container_name: redis
    image: redis/redis-stack:7.4.0-v3
    restart: unless-stopped
    ports:
      - "${REDIS_WEB_PORT}:8001"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_ARGS=--port ${REDIS_PORT} --save 60 1 --loglevel warning --activedefrag no
    healthcheck:
      test:
        ["CMD", "redis-cli", "-h", "localhost", "-p", "${REDIS_PORT}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    expose:
      - ${REDIS_PORT}

volumes:
  redis_data:
